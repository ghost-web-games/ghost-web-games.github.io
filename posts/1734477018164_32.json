{
  "title": "UI 및 HUD 개발",
  "date": 1734477018501,
  "data": "{\n  \"time\": 1734477018500,\n  \"blocks\": [\n    {\n      \"id\": \"zZ3mzqe7SD\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"게임에서 사용자 인터페이스(UI)와 HUD(Head-Up Display)는 플레이어가 게임 상태를 명확히 이해하도록 돕습니다. 여기서는 HTML + Three.js, 2D 캔버스를 활용해 점수, 타이머, 그리고 상태 표시기를 구현하는 방법을 다룹니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"8wbmMPWu_y\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1 HTML과 Three.js를 결합한 UI 제작\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"miPnZ22tLG\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Three.js는 3D 렌더링을 담당하지만, UI 제작은 HTML/CSS와 결합하면 직관적이고 간단하게 구현할 수 있습니다. HTML 요소를 Three.js의 카메라 시점에 고정하는 방법을 살펴보겠습니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"j8dRXts8BD\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"예제: 마우스 클릭 카운터 UI\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"bBz3awZtqE\",\n      \"type\": \"embed\",\n      \"data\": {\n        \"service\": \"codepen\",\n        \"source\": \"https://codepen.io/ghostwebservice/pen/dPbNPaK\",\n        \"embed\": \"https://codepen.io/ghostwebservice/embed/dPbNPaK?height=300&theme-id=0&default-tab=css,result&embed-version=2\",\n        \"width\": 600,\n        \"height\": 300,\n        \"caption\": \"상자를 클릭해보세요\"\n      }\n    },\n    {\n      \"id\": \"Kms3g9A6Qq\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2 2D 캔버스를 활용한 게임 상태 표시\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"X7dbIO__3J\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"&lt;canvas&gt;를 이용해 게임 상태(체력바, 점수 등)를 2D로 표현할 수 있습니다. 2D 캔버스는 Three.js와 독립적으로 작동하지만, 화면에 효과적으로 결합됩니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"gSEERQ5f2C\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"예제: 플레이어 체력바 구현\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"_VieSITH9K\",\n      \"type\": \"embed\",\n      \"data\": {\n        \"service\": \"codepen\",\n        \"source\": \"https://codepen.io/ghostwebservice/pen/wBwgKJr\",\n        \"embed\": \"https://codepen.io/ghostwebservice/embed/wBwgKJr?height=300&theme-id=0&default-tab=css,result&embed-version=2\",\n        \"width\": 600,\n        \"height\": 300,\n        \"caption\": \"스페이스바를 누르면 체력이 감소합니다.\"\n      }\n    },\n    {\n      \"id\": \"TGZeT2tgQz\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"3D 게임 상태 표시\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"kOb3EqKqfX\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Three.js의 <b>THREE.Sprite</b>를 사용하여 캐릭터 아래에 Health Bar를 구현하려면, 두 개의 텍스처를 사용해 Sprite를 생성하고, 업데이트마다 텍스처의 크기를 조정하여 체력 상태를 반영할 수 있습니다. 다음은 이에 대한 코드 예제입니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"A6cyYs_7kT\",\n      \"type\": \"embed\",\n      \"data\": {\n        \"service\": \"codepen\",\n        \"source\": \"https://codepen.io/ghostwebservice/pen/WbeRQjz\",\n        \"embed\": \"https://codepen.io/ghostwebservice/embed/WbeRQjz?height=300&theme-id=0&default-tab=css,result&embed-version=2\",\n        \"width\": 600,\n        \"height\": 300,\n        \"caption\": \"스페이스바를 클릭하면 체력이 감소합니다.\"\n      }\n    },\n    {\n      \"id\": \"lRpFqIesoM\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"설명\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"VYiH_Bj7gu\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"ordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"Health Bar 배경과 전경:빨간색 배경은 항상 고정된 크기이며, 체력 감소와 무관합니다.초록색 전경은 체력의 퍼센트에 따라 너비가 조정됩니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Sprite 활용:THREE.Sprite는 2D 요소로, 항상 카메라를 향해 렌더링됩니다.<b>CanvasTexture</b>를 사용해 동적으로 그래픽을 생성하고 적용했습니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Health 업데이트:키보드의 <b>스페이스바(Space)</b>를 눌러 체력을 감소시킬 수 있습니다.전경(barFgSprite)의 스케일과 위치를 조정하여 체력 상태를 반영합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"위치 조정:<b>character.add(barBgSprite)</b>와 <b>character.add(barFgSprite)</b>를 사용해 캐릭터 아래에 고정 배치했습니다position으로 Health Bar를 캐릭터 아래로 이동시켰습니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    }\n  ],\n  \"version\": \"2.30.7\"\n}",
  "id": "1734477018164_32"
}