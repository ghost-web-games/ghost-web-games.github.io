{
  "title": " 최적화와 배포",
  "date": 1734495075067,
  "data": "{\n  \"time\": 1734495075066,\n  \"blocks\": [\n    {\n      \"id\": \"39PospWre_\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"이 문서에서는 TensorFlow.js 모델의 크기를 줄이는 방법과 게임을 최종적으로 배포하는 과정을 다룹니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"eVO8lN3Ent\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1 성능 최적화: 웹 기반 실시간 게임의 문제 해결\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"rB0PNT--CZ\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"TensorFlow.js 성능 최적화\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"unjpJ4IS1M\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"ordered\",\n        \"meta\": {\n          \"start\": 1\n        },\n        \"items\": [\n          {\n            \"content\": \"WebGL Backend 활성화\",\n            \"meta\": {},\n            \"items\": [\n              {\n                \"content\": \"TensorFlow.js에서 WebGL 백엔드를 사용하여 연산 속도를 크게 향상시킬 수 있습니다.\",\n                \"meta\": {},\n                \"items\": []\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"amT5cmHjTM\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"tf.setBackend('webgl');\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"SENNhqTXIw\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"ordered\",\n        \"meta\": {\n          \"start\": 2,\n          \"counterType\": \"numeric\"\n        },\n        \"items\": [\n          {\n            \"content\": \"메모리 관리tf.\",\n            \"meta\": {},\n            \"items\": [\n              {\n                \"content\": \"tidy를 활용하여 사용 후 텐서를 즉시 정리합니다.\",\n                \"meta\": {},\n                \"items\": []\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"7kQYY2450y\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"function predict(state) {\\n    return tf.tidy(() => {\\n        const input = tf.tensor2d([state]);\\n        const output = model.predict(input);\\n        return output.dataSync();\\n    });\\n}\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"exEF7yhIuO\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"ordered\",\n        \"meta\": {\n          \"start\": 3,\n          \"counterType\": \"numeric\"\n        },\n        \"items\": [\n          {\n            \"content\": \"비동기 처리\",\n            \"meta\": {},\n            \"items\": [\n              {\n                \"content\": \"TensorFlow.js 모델을 사용하는 연산은 async/await로 처리하여 렌더링과 연산이 병렬로 실행되도록 설계합니다.\",\n                \"meta\": {},\n                \"items\": []\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"GP6VS20fKV\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"async function predictAction(state) {\\n    const qValues = await model.predict(tf.tensor2d([state])).data();\\n    return qValues;\\n}\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"KcrDAmgOO5\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2 TensorFlow.js 모델 압축 및 최적화\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"_dGVinA4_c\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1. 모델 훈련 후 저장 및 압축\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"2dnGzEKMyE\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"모델 훈련이 완료되면, 크기를 줄이고 최적화된 상태로 저장합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"DWJn_xgtrv\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"ordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"모델 양자화\",\n            \"meta\": {},\n            \"items\": [\n              {\n                \"content\": \"양자화를 통해 모델의 가중치를 32비트에서 8비트로 줄여 크기를 감소시킵니다.\",\n                \"meta\": {},\n                \"items\": []\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"DVw2j1zB_N\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const quantize = require('@tensorflow-model-optimizer');\\nconst optimizedModel = quantize(model);\\noptimizedModel.save('downloads://quantized-model');\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"C8mI2TgyfU\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"ordered\",\n        \"meta\": {\n          \"start\": 2,\n          \"counterType\": \"numeric\"\n        },\n        \"items\": [\n          {\n            \"content\": \"모델 정리\",\n            \"meta\": {},\n            \"items\": [\n              {\n                \"content\": \"필요하지 않은 메타데이터를 제거하여 모델 크기를 추가로 줄입니다.\",\n                \"meta\": {},\n                \"items\": []\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"8XgzDwJlvj\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2. TensorFlow.js 모델 변환\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"1MyI7Xkf2C\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"데스크톱에서 학습한 TensorFlow 모델(.h5)을 웹에서 사용 가능한 JSON 형식으로 변환합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"u7uQlE6BpQ\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"tensorflowjs_converter --input_format=tf_saved_model \\\\\\n                       --output_format=tfjs_graph_model \\\\\\n                       /path/to/model /path/to/output\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"YIVJatjVnt\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"이 문서에서는 TensorFlow.js 모델 최적화, 그리고 모델 배포 과정을 다루었습니다. 성능 개선과 모델 압축을 통해 게임의 효율성을 높이고, 최종적으로 웹에서 실행 가능한 상태로 배포하여 사용자가 어디서든 접근할 수 있게 됩니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    }\n  ],\n  \"version\": \"2.30.7\"\n}",
  "id": "1734495074696_34"
}