{
  "title": "지형 생성과 텍스처 활용",
  "date": 1733784328508,
  "data": "{\n  \"time\": 1733786280881,\n  \"blocks\": [\n    {\n      \"id\": \"WHisr6niiT\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"이 장에서는 Three.js로 게임에 필요한 지형을 생성하고, 텍스처를 활용하여 현실감 있는 장면을 만드는 방법을 배웁니다. 이를 통해 지형의 형태를 다양화하고, 텍스처 매핑을 사용하여 시각적으로 매력적인 환경을 구성할 수 있습니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"b2ChTSA1ti\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1 지형 생성의 기본\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"4C6tHX6vfW\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1.1 PlaneGeometry를 활용한 간단한 지형\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"Ybr-3FpYLd\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"PlaneGeometry는 평면 지형을 생성할 때 가장 기본적으로 사용하는 기하 구조입니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"AutqVrlszY\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const geometry = new THREE.PlaneGeometry(100, 100, 32, 32);\\nconst material = new THREE.MeshStandardMaterial({ color: 0x228b22, wireframe: true });\\nconst plane = new THREE.Mesh(geometry, material);\\nplane.rotation.x = -Math.PI / 2; // 수평으로 회전\\nscene.add(plane);\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"Y1Hf64a7sB\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1.2 Vertex Manipulation으로 지형 변형\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"NZnObFBgEu\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"PlaneGeometry의 버텍스를 조작하여 언덕이나 계곡과 같은 불규칙한 지형을 만듭니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"9a8wKMnb_f\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const geometry = new THREE.PlaneGeometry(100, 100, 32, 32);\\n\\n// 버텍스 높이 변경\\nconst vertices = geometry.attributes.position.array;\\nfor (let i = 0; i < vertices.length / 3; i++) {\\n    const y = Math.random() * 5; // 랜덤 높이\\n    vertices[i * 3 +2] = y\\n}\\n\\ngeometry.computeVertexNormals(); // 조명 계산을 위한 법선 업데이트\\n\\nconst material = new THREE.MeshStandardMaterial({ color: 0x87ceeb, wireframe: false });\\nconst plane = new THREE.Mesh(geometry, material);\\nplane.rotation.x = -Math.PI / 2;\\nscene.add(plane);\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"Tfr8ALPOMY\",\n      \"type\": \"embed\",\n      \"data\": {\n        \"service\": \"codepen\",\n        \"source\": \"https://codepen.io/ghostwebservice/pen/KwPMWWN\",\n        \"embed\": \"https://codepen.io/ghostwebservice/embed/KwPMWWN?height=300&theme-id=0&default-tab=css,result&embed-version=2\",\n        \"width\": 600,\n        \"height\": 300,\n        \"caption\": \"지형의 높낮이를 설정할 수 있습니다.\"\n      }\n    },\n    {\n      \"id\": \"nv6HJeUz8g\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1.3 Perlin Noise를 이용한 자연스러운 지형\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"II3PFtZXH7\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Perlin Noise를 사용하여 더욱 자연스럽고 현실감 있는 지형을 만듭니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"LVnIotIlpr\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"import { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise.js';\\n\\nconst size = 100;\\nconst segments = 128;\\nconst geometry = new THREE.PlaneGeometry(size, size, segments, segments);\\nconst vertices = geometry.attributes.position;\\nconst perlin = new ImprovedNoise();\\n\\nfor (let i = 0; i < vertices.count; i++) {\\n    const x = vertices.getX(i) / size;\\n    const z = vertices.getZ(i) / size;\\n    const y = perlin.noise(x * 10, z * 10, 0) * 10; // Perlin 노이즈 활용\\n    vertices.setY(i, y);\\n}\\n\\ngeometry.computeVertexNormals();\\n\\nconst material = new THREE.MeshStandardMaterial({ color: 0x8b4513 });\\nconst terrain = new THREE.Mesh(geometry, material);\\nterrain.rotation.x = -Math.PI / 2;\\nscene.add(terrain);\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"LIxxhpO40o\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2 텍스처 매핑\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"-7YGqifqAx\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"지형에 텍스처를 추가하여 현실감을 더합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"IUbB4G08Ih\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2.1 기본 텍스처 적용\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"fNuHzRWvT6\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"기본 텍스처를 적용하여 지형의 표면을 꾸밀 수 있습니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"Iub9P2lhux\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const loader = new THREE.TextureLoader();\\nconst texture = loader.load('textures/grass.jpg'); // 텍스처 경로\\nconst material = new THREE.MeshStandardMaterial({ map: texture });\\n\\nconst geometry = new THREE.PlaneGeometry(100, 100, 32, 32);\\nconst plane = new THREE.Mesh(geometry, material);\\nplane.rotation.x = -Math.PI / 2;\\nscene.add(plane);\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"yrrAAZg-lD\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2.2 다중 텍스처 매핑\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"OZLWRP1Yc0\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Perlin Noise를 사용하여 특정 영역에 다양한 텍스처를 자연스럽게 혼합합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"qiJtI6adyZ\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"아래 코드는 쉐이더 코드를 사용한 예제입니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"4CwdS34YWv\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const loader = new THREE.TextureLoader();\\nconst grassTexture = loader.load('textures/grass.jpg');\\nconst dirtTexture = loader.load('textures/dirt.jpg');\\n\\n// ShaderMaterial로 텍스처 혼합\\nconst material = new THREE.ShaderMaterial({\\n    uniforms: {\\n        grassTexture: { value: grassTexture },\\n        dirtTexture: { value: dirtTexture },\\n    },\\n    vertexShader: `\\n        varying vec2 vUv;\\n        void main() {\\n            vUv = uv;\\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n        }\\n    `,\\n    fragmentShader: `\\n        varying vec2 vUv;\\n        uniform sampler2D grassTexture;\\n        uniform sampler2D dirtTexture;\\n\\n        void main() {\\n            vec4 grass = texture2D(grassTexture, vUv);\\n            vec4 dirt = texture2D(dirtTexture, vUv);\\n            float mixFactor = smoothstep(0.4, 0.6, vUv.y); // y 축 기준 혼합\\n            gl_FragColor = mix(grass, dirt, mixFactor);\\n        }\\n    `,\\n});\\n\\nconst geometry = new THREE.PlaneGeometry(100, 100, 32, 32);\\nconst terrain = new THREE.Mesh(geometry, material);\\nterrain.rotation.x = -Math.PI / 2;\\nscene.add(terrain)\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"DCKiRBrMrG\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"3 고도 데이터를 활용한 지형 생성\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"_VLim9AWAN\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"고도 데이터를 사용하여 실제 지형을 생성합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"7NhYqmwMZt\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"3.1 고도 데이터 읽기\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"eCka_Q_igA\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"흑백 이미지(Height Map)를 읽어 지형의 높이를 설정합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"cvFTkT30ZF\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"/const loader = new THREE.TextureLoader();\\nconst heightMap = loader.load('textures/heightmap.png');\\n\\nheightMap.wrapS = THREE.RepeatWrapping;\\nheightMap.wrapT = THREE.RepeatWrapping;\\n\\nconst size = 100;\\nconst segments = 128;\\nconst geometry = new THREE.PlaneGeometry(size, size, segments, segments);\\nconst vertices = geometry.attributes.position;\\n\\nconst canvas = document.createElement('canvas');\\nconst context = canvas.getContext('2d');\\nconst img = heightMap.image;\\ncanvas.width = img.width;\\ncanvas.height = img.height;\\ncontext.drawImage(img, 0, 0);\\n\\nconst imageData = context.getImageData(0, 0, img.width, img.height).data;\\n\\nfor (let i = 0; i < vertices.count; i++) {\\n    const x = (i % segments) / segments * img.width;\\n    const y = Math.floor(i / segments) / segments * img.height;\\n    const pixelIndex = Math.floor(y) * img.width + Math.floor(x);\\n    const height = imageData[pixelIndex * 4] / 255 * 10; // 흑백 값을 높이로 변환\\n    vertices.setY(i, height);\\n}\\n\\ngeometry.computeVertexNormals();\\n\\nconst material = new THREE.MeshStandardMaterial({ color: 0x8b4513 });\\nconst terrain = new THREE.Mesh(geometry, material);\\nterrain.rotation.x = -Math.PI / 2;\\nscene.add(terrain);\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"wxTZuPKCof\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"4 환경 효과 추가\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"SY9xZIDQJz\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"4.1 그림자 설정\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"K9p99pTk8R\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"지형과 조명에 그림자를 설정하여 입체감을 더합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"kdZFMOFonh\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"renderer.shadowMap.enabled = true;\\nlight.castShadow = true;\\nterrain.receiveShadow = true;\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"0DFaxRfajC\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"4.2 물체 반사 효과\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"VqjQelc9tT\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"물 웅덩이나 호수와 같은 반사 효과를 추가합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"APPYFUyOwN\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"<b>Reflector </b>클래스를 활용하거나 커스텀 쉐이더를 사용할 수 있습니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    }\n  ],\n  \"version\": \"2.30.7\"\n}",
  "id": "1733784328291_21"
}