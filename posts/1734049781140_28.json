{
  "title": "게임 로직 구현",
  "date": 1734049781531,
  "data": "{\n  \"time\": 1734137936159,\n  \"blocks\": [\n    {\n      \"id\": \"aeyuO1tnSI\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"게임 로직은 플레이어와 NPC의 상태를 관리하고, 게임의 규칙과 흐름을 제어하는 핵심 요소입니다. 여기에서는 상태 관리와 게임 루프 설계, 플레이어와 NPC 구현, AI의 기초를 단계적으로 다룹니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"Ccl-LszVzb\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"8.1 상태 관리와 게임 루프 설계\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"Zkr5A7CP7s\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"게임 상태와 반복 실행(게임 루프)은 게임의 핵심입니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"zVak6_4bDU\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"게임 상태 관리\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"DgC8_mkaMl\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"게임의 각 상태를 객체로 정의하고, 현재 상태를 업데이트 및 렌더링합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"ts_LheLiWx\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"// 게임 상태 관리\\nconst GameState = {\\n  MENU: 'menu',\\n  PLAYING: 'playing',\\n  PAUSED: 'paused',\\n  GAME_OVER: 'game_over',\\n};\\n\\nlet currentState = GameState.MENU;\\n\\nfunction changeState(newState) {\\n  currentState = newState;\\n  console.log(`Game state changed to: ${newState}`);\\n}\\n\\n// 상태 전환 예시\\nchangeState(GameState.PLAYING);\\nchangeState(GameState.PAUSED);\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"Jqc-a-G5Ge\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"게임 루프 설계\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"KHP8cPu1UV\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Three.js에서 게임 루프는 requestAnimationFrame으로 구현됩니다. 게임 루프는 렌더링 이전에 물리 업데이트, 입력 처리, 상태 관리를 담당합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"zCwEYgyYft\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"예제보다 디자인 패턴 중 하나인 State Pattern을 사용하는 것을 추천합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"agecHG0-Oy\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"function gameLoop() {\\n  // 상태별 업데이트\\n  switch (currentState) {\\n    case GameState.PLAYING:\\n      updatePhysics();\\n      updatePlayer();\\n      updateNPCs();\\n      break;\\n\\n    case GameState.PAUSED:\\n      // 별도 처리 없음\\n      break;\\n\\n    case GameState.GAME_OVER:\\n      // 게임 종료 화면 처리\\n      break;\\n  }\\n\\n  renderer.render(scene, camera);\\n  requestAnimationFrame(gameLoop);\\n}\\n\\ngameLoop();\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"b8K8V_ZjVt\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2 플레이어와 NPC 구현\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"Q-PzCNqDIT\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"플레이어와 NPC를 Three.js와 Cannon.js로 구현합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"z2UHDs_P8g\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"플레이어 구현\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"vcDat-trwR\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"플레이어는 기본적인 이동 및 점프가 가능한 캐릭터로 설정합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"G25Vqd6PA4\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"// 플레이어 객체 생성\\nconst playerGeometry = new THREE.BoxGeometry(1, 1, 1);\\nconst playerMaterial = new THREE.MeshStandardMaterial({ color: 0x0000ff });\\nconst playerMesh = new THREE.Mesh(playerGeometry, playerMaterial);\\nscene.add(playerMesh);\\n\\n// 물리 속성\\nconst playerBody = new CANNON.Body({\\n  mass: 1,\\n  shape: new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5)),\\n});\\nplayerBody.position.set(0, 1, 0);\\nworld.addBody(playerBody);\\n\\n// 이동 입력\\nconst playerSpeed = 5;\\nconst input = { left: false, right: false, forward: false, backward: false };\\n\\nwindow.addEventListener('keydown', (event) => {\\n  if (event.key === 'ArrowUp') input.forward = true;\\n  if (event.key === 'ArrowDown') input.backward = true;\\n  if (event.key === 'ArrowLeft') input.left = true;\\n  if (event.key === 'ArrowRight') input.right = true;\\n});\\n\\nwindow.addEventListener('keyup', (event) => {\\n  if (event.key === 'ArrowUp') input.forward = false;\\n  if (event.key === 'ArrowDown') input.backward = false;\\n  if (event.key === 'ArrowLeft') input.left = false;\\n  if (event.key === 'ArrowRight') input.right = false;\\n});\\n\\nfunction updatePlayer() {\\n  const force = new CANNON.Vec3();\\n  if (input.forward) force.z -= playerSpeed;\\n  if (input.backward) force.z += playerSpeed;\\n  if (input.left) force.x -= playerSpeed;\\n  if (input.right) force.x += playerSpeed;\\n\\n  playerBody.applyForce(force, playerBody.position);\\n  playerMesh.position.copy(playerBody.position);\\n  playerMesh.quaternion.copy(playerBody.quaternion);\\n}\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"0VWQTzC_Yh\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"NPC 구현\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"SN82QLsuAR\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"NPC는 플레이어와 상호작용하거나 AI에 따라 움직이는 오브젝트입니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"QI9bDV0UR2\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"// NPC 생성\\nconst npcGeometry = new THREE.BoxGeometry(1, 1, 1);\\nconst npcMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });\\nconst npcMesh = new THREE.Mesh(npcGeometry, npcMaterial);\\nscene.add(npcMesh);\\n\\nconst npcBody = new CANNON.Body({\\n  mass: 1,\\n  shape: new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0.5)),\\n});\\nnpcBody.position.set(5, 1, 0);\\nworld.addBody(npcBody);\\n\\nfunction updateNPC() {\\n  npcMesh.position.copy(npcBody.position);\\n  npcMesh.quaternion.copy(npcBody.quaternion);\\n}\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"p5LGQoTIHK\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"3 AI의 기초 (간단한 추적 및 회피)\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"SyFBX8oqaD\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"AI는 NPC가 플레이어를 추적하거나 회피하는 행동을 구현합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"-0p0aQTqxw\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1. 추적 AI\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"XIRv9AzoDz\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"NPC가 플레이어를 향해 움직입니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"St1iSTXpp4\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"function trackPlayer(npc, player) {\\n  const direction = new CANNON.Vec3(\\n    player.position.x - npc.position.x,\\n    0, // y 축은 무시\\n    player.position.z - npc.position.z\\n  );\\n\\n  direction.normalize(); // 방향 벡터를 단위 벡터로 변환\\n  const force = direction.scale(3); // 속도 조절\\n  npc.applyForce(force, npc.position);\\n}\\n\\nfunction updateAI() {\\n  trackPlayer(npcBody, playerBody);\\n}\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"A_wWjBXvRe\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2. 회피 AI\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"pV-ce___JY\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"NPC가 플레이어와의 거리를 감지하고 멀어집니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"7EqzRbJUxt\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"function avoidPlayer(npc, player) {\\n  const distance = npc.position.distanceTo(player.position);\\n  if (distance < 5) { // 특정 거리 이하일 때 회피\\n    const direction = new CANNON.Vec3(\\n      npc.position.x - player.position.x,\\n      0,\\n      npc.position.z - player.position.z\\n    );\\n\\n    direction.normalize();\\n    const force = direction.scale(5); // 더 빠르게 이동\\n    npc.applyForce(force, npc.position);\\n  }\\n}\\n\\nfunction updateAI() {\\n  avoidPlayer(npcBody, playerBody);\\n}\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"UKOYWSERjL\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"AI 업데이트 추가\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"dSMJkxs-q0\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"위 코드를 게임 루프에 통합합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"R_afYwgHop\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"function gameLoop() {\\n  switch (currentState) {\\n    case GameState.PLAYING:\\n      updatePhysics();\\n      updatePlayer();\\n      updateNPC();\\n      updateAI();\\n      break;\\n  }\\n\\n  renderer.render(scene, camera);\\n  requestAnimationFrame(gameLoop);\\n}\\n\\ngameLoop();\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"J-Mw_4qO1X\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"결과\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"kfeLN1HfyK\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"ordered\",\n        \"meta\": {\n          \"counterType\": \"numeric\"\n        },\n        \"items\": [\n          {\n            \"content\": \"플레이어는 키보드 방향키로 이동합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"NPC는 플레이어를 따라오거나 회피합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Cannon.js의 물리 엔진과 Three.js를 통합하여 실감 나는 물리적 상호작용이 가능합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"PxDDKtOuTU\",\n      \"type\": \"embed\",\n      \"data\": {\n        \"service\": \"codepen\",\n        \"source\": \"https://codepen.io/ghostwebservice/pen/emOdwza\",\n        \"embed\": \"https://codepen.io/ghostwebservice/embed/emOdwza?height=300&theme-id=0&default-tab=css,result&embed-version=2\",\n        \"width\": 600,\n        \"height\": 300,\n        \"caption\": \"충분한 힘을 전달 받기 위해 키를 길게 눌러주세요\"\n      }\n    },\n    {\n      \"id\": \"XcYNmafgvI\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"확장 아이디어로는 다음이 있겠습니다.\",\n        \"level\": 6\n      }\n    },\n    {\n      \"id\": \"d0T21sHcdZ\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"추가 NPC: 다수의 NPC가 각기 다른 AI 동작(랜덤 이동, 집단 추적)을 수행.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"게임 승리 조건: NPC를 피해 특정 목표에 도달하면 승리.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"추적 + 회피: 일정 범위에서는 추적, 플레이어가 너무 가까워지면 회피.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    }\n  ],\n  \"version\": \"2.30.7\"\n}",
  "id": "1734049781140_28"
}