{
  "title": "Threejs Object3D",
  "date": 1733351528637,
  "data": "{\n  \"time\": 1733351528635,\n  \"blocks\": [\n    {\n      \"id\": \"UGp0mHeia7\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Three.js에서 Object3D는 3D 공간에서 모든 객체의 기본 클래스입니다. 모든 3D 객체(Mesh, Group, Camera, Light, 등)는 Object3D를 상속하며, 3D 공간 내의 위치, 회전, 크기 등 기본적인 속성과 메서드를 공유합니다. 이를 자세히 살펴보겠습니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"HBfhgeCGEl\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"1. Object3D의 역할\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"PZq78tc5jK\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"3D 공간에서의 위치(position), 회전(rotation), 크기(scale), 변환(matrix) 등 공간적 속성을 관리합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"계층 구조를 지원하며, 다른 Object3D 객체를 자식으로 포함할 수 있습니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Scene, Mesh, Group, Camera, Light 등 Three.js의 대부분의 클래스는 Object3D를 기반으로 동작합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"xNerUmCNH9\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"2. 주요 속성\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"53MSTkvAHu\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(1) position\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"uOVn-L65L0\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"3D 공간에서 객체의 위치를 나타냅니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Vector3 객체로 구성되며, x, y, z 좌표를 나타냅니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"Ig5vNEllTr\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"object.position.set(1, 2, 3); // x=1, y=2, z=3\\nconsole.log(object.position.x); // 1\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"jt5PgEoYyN\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(2) rotation\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"FULS1_R7_I\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체의 회전을 라디안 단위로 나타냅니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Euler 객체를 사용하며, x, y, z 축을 기준으로 회전을 설정합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"회전 순서는 rotation.order 속성으로 설정하며, 기본값은 XYZ입니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"9vBfGrloFR\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"object.rotation.set(Math.PI / 4, Math.PI / 2, 0); // x축 45°, y축 90°, z축 0°\\nconsole.log(object.rotation.y); // 1.5708 (라디안)\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"V_9MIMQ3FM\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(3) scale\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"W0AcqKgBof\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체의 크기를 나타냅니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Vector3 객체로 구성되며, 각 축에 대한 크기 비율을 설정합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"jNvgWhqoQK\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"object.scale.set(2, 2, 2); // x, y, z 축 2배 크기\\nconsole.log(object.scale.x); // 2\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"TZ5AZF8Met\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(4) matrix\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"_QftNcTazT\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체의 변환 정보를 4x4 행렬로 나타냅니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"position, rotation, scale이 변하면 matrix도 변경됩니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"matrixAutoUpdate 속성이 true인 경우 자동으로 업데이트됩니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"NlTl1oxHik\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"object.matrixAutoUpdate = false; // 자동 업데이트 비활성화\\nobject.updateMatrix(); // 수동으로 업데이트\\nconsole.log(object.matrix); // 변환 행렬\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"j4Nk8p8YCL\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(5) children\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"jtwpqVQuEt\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"해당 객체의 자식 객체 배열입니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"Object3D는 계층 구조를 지원하며, 다른 Object3D 객체를 자식으로 추가할 수 있습니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"4jOmhQIfdR\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const parent = new THREE.Object3D();\\nconst child = new THREE.Object3D();\\n\\nparent.add(child); // 자식 추가\\nconsole.log(parent.children); // [child]\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"x2iUUcx_LF\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(6) parent\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"GcWS8AV8lj\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"현재 객체의 부모 객체를 참조합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"최상위 객체(Scene 등)의 경우 null입니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"9PtJePWH1-\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(7) visible\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"Wjwa1Qvis5\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체의 가시성을 제어합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"false로 설정하면 렌더링되지 않습니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"hWjlreX8Qd\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"object.visible = false; // 숨기기\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"j12C05sJ-Z\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(8) name\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"N7rm91YXPV\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체의 이름을 설정하거나 검색에 사용할 수 있습니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"GLTF 모델에서 설정된 노드 이름을 가져올 수도 있습니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"아이템을 추가나 제거할때 유용합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"lHbo4yCtpP\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"object.name = 'MyObject';\\nconsole.log(object.name); // MyObject\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"LtbbimryBu\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"3. 주요 메서드\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"ZLuk8b4lUp\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(1) add(child)\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"quIw0xNDFO\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"자식 객체를 추가합니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"부모-자식 관계를 통해 트리 구조를 형성합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"9NN_CztB63\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(2) remove(child)\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"dj8BM_9Mb7\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"자식 객체를 제거합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"kHxLoSPthL\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(3) traverse(callback)\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"oTplRC20wm\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체와 모든 하위 자식 객체를 순회하며 콜백 함수를 실행합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"JuAgJF75Ky\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(4) lookAt(vector)\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"RsAz15rZil\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체를 특정 방향으로 회전시킵니다.\",\n            \"meta\": {},\n            \"items\": []\n          },\n          {\n            \"content\": \"대상 좌표는 Vector3로 설정합니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"mmJiAWipjL\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(5) clone()\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"eS19CognYp\",\n      \"type\": \"list\",\n      \"data\": {\n        \"style\": \"unordered\",\n        \"meta\": {},\n        \"items\": [\n          {\n            \"content\": \"객체를 복제합니다. 자식 객체도 함께 복제됩니다.\",\n            \"meta\": {},\n            \"items\": []\n          }\n        ]\n      }\n    },\n    {\n      \"id\": \"SR0zUc_eCY\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"4. Object3D를 활용한 예제\",\n        \"level\": 2\n      }\n    },\n    {\n      \"id\": \"DiIchxThS2\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"// 부모 객체 생성\\nconst parent = new THREE.Object3D();\\nparent.position.set(0, 0, 0);\\nscene.add(parent);\\n\\n// 자식 메시 추가\\nconst geometry = new THREE.BoxGeometry();\\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\\nconst childMesh = new THREE.Mesh(geometry, material);\\n\\nchildMesh.position.set(1, 1, 1); // 자식 위치 설정\\nparent.add(childMesh); // 부모에 자식 추가\\n\\n// 부모 회전\\nparent.rotation.y = Math.PI / 4;\\n\\n// 순회하며 정보 출력\\nparent.traverse((child) => {\\n  console.log(child.name, child.position);\\n});\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"YtivfD_QrZ\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"5. Object3D의 활용\",\n        \"level\": 3\n      }\n    },\n    {\n      \"id\": \"U73cW7w14l\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(1) 씬 구조 관리\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"mBU5O_Buva\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Three.js에서 복잡한 3D 장면(Scene)을 구성할 때, Object3D는 계층적 구조를 통해 객체를 효율적으로 관리할 수 있도록 돕습니다.각 Object3D는 부모-자식 관계를 형성하며, 이를 통해 다수의 객체를 그룹으로 묶거나 트리 구조를 만들어 체계적으로 정리할 수 있습니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"fF-VxkEYLH\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"예를 들어, 자동차 모델을 구성한다고 가정하면, 자동차의 바퀴, 차체, 창문 등을 각각 별개의 Object3D로 정의하고, 이를 하나의 Group 객체로 묶을 수 있습니다. 자동차 전체를 이동시키거나 회전할 때, 이 그룹을 조작하면 포함된 모든 객체가 함께 움직이므로 관리가 간단해집니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"Zjx6htJ9Oz\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const car = new THREE.Group(); // 자동차 그룹 생성\\nconst wheel = new THREE.Mesh(wheelGeometry, wheelMaterial); // 바퀴 생성\\nconst body = new THREE.Mesh(bodyGeometry, bodyMaterial); // 차체 생성\\n\\ncar.add(wheel); // 그룹에 바퀴 추가\\ncar.add(body);  // 그룹에 차체 추가\\n\\nscene.add(car); // 자동차 그룹을 씬에 추가\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"0mIdj6OYN4\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"위 예제처럼 Object3D 계층 구조를 활용하면 복잡한 모델이나 씬을 효율적으로 관리할 수 있습니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"rh9ckReQpa\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(2) 애니메이션 제어\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"mkEW1irs4o\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Object3D의 부모-자식 관계를 활용하면, 부모 객체를 변환(위치, 회전, 크기 변경)할 때 모든 자식 객체도 동일한 변환을 적용받습니다.이는 복잡한 애니메이션을 단순화할 수 있는 강력한 도구입니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"S7Xs4VDDwo\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"예를 들어, 헬리콥터의 본체를 중심으로 회전하는 날개를 구성할 때, 날개를 헬리콥터 본체의 자식으로 설정하면, 본체를 움직이거나 회전할 때 날개도 함께 따라갑니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"94SR3Tei1k\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const helicopter = new THREE.Object3D(); // 헬리콥터 그룹\\nconst blade = new THREE.Mesh(bladeGeometry, bladeMaterial); // 날개 생성\\n\\nhelicopter.add(blade); // 날개를 헬리콥터에 추가\\nscene.add(helicopter); // 헬리콥터를 씬에 추가\\n\\n// 헬리콥터 이동\\nhelicopter.position.set(0, 10, 0);\\n\\n// 날개 회전 애니메이션\\nblade.rotation.x += 0.1;\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"D75jtcBShN\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"이처럼 부모 객체의 이동과 회전에 자식 객체가 자동으로 따라오므로, 애니메이션 로직이 간소화됩니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"8IJmOOt6NG\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"(3) 동적 모델 관리\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"kX5L4VVwzz\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Object3D를 활용하면 런타임(실행 중)에 3D 모델을 동적으로 추가하거나 제거할 수 있습니다.이는 인터랙티브한 3D 애플리케이션, 예를 들어 게임에서 적 캐릭터를 생성하거나 파괴하는 경우나, 건축 시뮬레이션에서 새로운 요소를 추가하는 경우에 매우 유용합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"WwLT15YhYD\",\n      \"type\": \"code\",\n      \"data\": {\n        \"code\": \"const newObject = new THREE.Mesh(newGeometry, newMaterial); // 새로운 메시 생성\\nscene.add(newObject); // 씬에 추가\\n\\n// 특정 이벤트에서 제거\\nscene.remove(newObject);\",\n        \"language\": \"javascript\",\n        \"showlinenumbers\": true\n      }\n    },\n    {\n      \"id\": \"COMh9uPA-9\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"동적 추가/제거는 사용자 입력, 시뮬레이션 상태, 또는 애니메이션의 필요에 따라 실시간으로 씬을 업데이트할 수 있게 해줍니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    },\n    {\n      \"id\": \"dWCkr8nA-p\",\n      \"type\": \"header\",\n      \"data\": {\n        \"text\": \"Object3D의 중요성\",\n        \"level\": 4\n      }\n    },\n    {\n      \"id\": \"nEKGagP-8f\",\n      \"type\": \"paragraph\",\n      \"data\": {\n        \"text\": \"Object3D는 Three.js의 모든 객체(Mesh, Group, Light, Camera 등)가 상속받는 기본 클래스입니다.이를 제대로 이해하면 3D 씬 구성과 객체 관리가 훨씬 간단해지고, 복잡한 모델을 효율적으로 조작할 수 있습니다.특히 계층 구조 관리, 애니메이션 적용, 동적 객체 추가/제거는 Three.js 애플리케이션의 핵심적인 기능이므로, Object3D를 활용하는 방법을 숙지하는 것이 중요합니다.\"\n      },\n      \"tunes\": {\n        \"textVariant\": \"\"\n      }\n    }\n  ],\n  \"version\": \"2.30.7\"\n}",
  "id": "1733351528596_15"
}